System Architecture

Part 1: The LLM Chat Script Creator

This is essentially what you created first, the chat interface, except it will have our new system prompt which instructs Claude to write a javascript file, AND it will be a single file/program rather than a client/server program.

So it looks something like this:

User runs the program
In the terminal, client program prints: "Enter your game description"
Program prepares a message to claude containing the system prompt plus the user's game description
The system prompt contains instructions for Claude to indicate where in his response the javascript code begins and ends, for example
"Claude, begin your javascript code with the following line "JAVASCRIPT BEGINS HERE" and end it with "JAVASCRIPT ENDS HERE"
Program sends the message to claude via anthropic's api and waits for response
Program prints response to terminal for user to see
Program parses response, looking for the beginning and end of the javascript.
After finding the beginning and end of the javascript, the program extracts the text in between
The program writes the text to a javascript file with an appropriate name.

EXAMPLE
myscript.js
input = "Enter your game description"
claudesResponse = anthropicAPI.sendToClaude(input)
text = claudesResponse[0][1]
writefile(parsedText, "game.js")

Develop this in stages to make it easier:
1. Get the basic chat with Claude working
2. System prompts are being sent to Claude
3. LLM response contains javascript code and has beginning and ending delimiters
4. The program is successfully parsing the response for the javascript code
5. The javascript code in the response is correct, with a proper startGame() function and all the proper methods of the engine. Start VERY simple first - ie just creating a zone, nothing else.
6. The program writes the parsed javascript code to a file in the right directory.

Part 2: The Game Engine
When the game engine starts, it searches a specific directory for javascript files (this is where Claude will write the files to)
When it finds a script there, it loads/reads it.
Takes the name of the script and displays it somewhere on the page (so that we know we've found it).
The GUI has a "Start Game" button.
When this button is pressed, it calls the "startGame()" function in the script. 
The startGame() function then runs the game, calling game engine methods as it needs to.
The script needs access to the game engine's methods, so we should pass it a reference to the game engine when we call startGame()
Like this: "startGame(gameEngine)" or maybe "startGame(this)", etc

Development stages:
1. The engine can find the script
2. The engine can read the script's name and show it somewhere in the GUI
3. When the user clicks "Start Game", the "startGame()" function in the script is actually called.
4. When the user clicks Start Game, the script successfully calls some methods in the engine. Very simple at first, ie just creating a zone.

Once this is done, we have the foundation of the system and we can then make the script more complex and create actual simple games.



